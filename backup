#!/usr/bin/env python3
from collections import defaultdict
import subprocess
import urllib.request
import argparse

CODE_CDN = "https://raw.githubusercontent.com/saffronner/backup_script/main/backup"
VERSION = "1.7.1"

LAPTOP_EXCLUDE = [
    ".steam",
    "snap",
    ".cache",
    "cache",
    ".rustup",
    ".cargo/registry",
    "gems",
    "discord",
    "Code",
    ".ssh",
]

PHONE_EXCLUDE = [
    ".ssh",
]


def get_version(backup_script_code: str) -> str:
    return [line for line in backup_script_code.splitlines() if "VERSION" in line][0]


def check_for_updates():
    try:
        current_code = open(__file__).read()
        print(f"running saffron backup script {get_version(current_code)}")
        cdn_code = urllib.request.urlopen(CODE_CDN).read().decode()
        print(f"CDN script at {get_version(cdn_code)}")
        if cdn_code != current_code:
            raise Exception("outdated code")
    except:
        print(f"{parser.prog} may be outdated. Go get a new version from {CODE_CDN}.")
        if input("[Y]/override: ").lower() != "override":
            exit()

        print(f"{parser.prog} is up to date.")


def upgrade():
    print("upgrading")
    to_run = [
        ["rm", __file__],
        ["curl", "-o", __file__, CODE_CDN],
        ["chmod", "+x", __file__],
    ]
    if args.verbose:
        print(f"running {to_run}")
    for r in to_run:
        subprocess.run(r)

parser = argparse.ArgumentParser(
    description=f"saffron's backup script version {VERSION}",
    epilog='"... and seemingly every type of love <3"',
)
parser.add_argument(
    "-v", "--verbose", action="store_true", help="show extra debug messages"
)
parser.add_argument(
    "-d", "--dir-append", default="", help="append to the src and dest dirs of the rsync call (remember trailing `/`!) e.g. `-d Desktop/cmu/`"
)
parser.add_argument(
    "--rsync-args", default="", help='append to the list of args passed to internal rsync calls e.g. --rsync-args=-vvv'
)
parser.add_argument(
    "--force",
    action="store_true",
    help="run script without checking CDN for code updates",
)
parser.add_argument("--version", action="version", version=f"%(prog)s {VERSION}")

subparsers = parser.add_subparsers(title="subcommands", dest="subcommand", metavar="\033[F")  # metavar: say a row of nothing by moving the cursor up, instead of `  {update,upgrade}`

update_parser = subparsers.add_parser('update', help='checks for updates')
update_parser.set_defaults(func=check_for_updates)

upgrade_parser = subparsers.add_parser('upgrade', help='replaces current code with CDN')
upgrade_parser.set_defaults(func=upgrade)
args = parser.parse_args()

if args.subcommand is not None:
    args.func()
    exit()

if args.dir_append != "" and args.dir_append[-1] != "/" and args.dir_append[0] != "/":
    print(f"{parser.prog}: error: extra directory should be of the form `dir/dir/` (no leading /, yes trailing /)")
    exit()

def rsync_exclude(
    src: str, dest: str, rsync_args: list[str] = [], exclude: list[str] = []
) -> list[str]:
    """returns a list of args that subprocess.run can call"""
    ans = []
    ans.append("rsync")
    ans.append(args.rsync_args)
    ans.extend(rsync_args)
    for ex in exclude:
        ans.append("--exclude")
        ans.append(ex)
    ans.append(src + args.dir_append)
    ans.append(dest + args.dir_append)

    if args.verbose:
        print(f"rsync_exclude generated: {ans}")

    return ans


class Direction:
    """
    This class ...

    Subclasses shall specify directions of backups and corresponding data such as commands needed to run.
    """

    src_desc: str = "X"
    dest_desc: str = "X"
    id: str = "X"
    backup_commands: list[list[str]] = [["echo", "do nothing"]]


class SDDMemoriesToRsync(Direction):
    src_desc: str = "SDD memories"
    dest_desc: str = "rsync.net"
    id: str = "0"
    backup_commands: list[list[str]] = [
        rsync_exclude(
            src="/media/saffron/saffron's/memories/",
            dest="fm2128@fm2128.rsync.net:memories/",
            rsync_args=["-aP"],
        )
    ]


class LapToRsync(Direction):
    src_desc: str = "laptop"
    dest_desc: str = "rsync.net"
    id: str = "1"
    backup_commands: list[list[str]] = [
        rsync_exclude(
            src="/home/saffron/",
            dest="fm2128@fm2128.rsync.net:saffron_homedir/",
            rsync_args=["-aP"],
            # rsync_args=["-aP", "--dry-run"],
            exclude=LAPTOP_EXCLUDE,
        )
    ]


class LapToSSD(Direction):
    src_desc: str = "laptop"
    dest_desc: str = "external SSD"
    id: str = "2"
    backup_commands: list[list[str]] = [
        rsync_exclude(
            src="/home/saffron/",
            dest="/media/saffron/saffron's/saffron_homedir/",
            rsync_args=["-aP"],
            exclude=LAPTOP_EXCLUDE,
        )
    ]


# class LapToPrism(Direction):
#     src_desc: str = "laptop"
#     dest_desc: str = "PRISM NAS"
#     id: str = "3"
#     backup_commands: list[list[str]] = [["echo", "TODO"]]


class PhoneToRsync(Direction):
    src_desc: str = "phone"
    dest_desc: str = "rsync.net"
    id: str = "4"
    backup_commands: list[list[str]] = [
        rsync_exclude(
            src="/data/data/com.termux/files/home/",
            dest="fm2128@fm2128.rsync.net:phone_homedir/",
            rsync_args=["-aPL"],
            exclude=PHONE_EXCLUDE,
        )
    ]


def get_instructions() -> str:
    partition: defaultdict[str, list[Direction]] = defaultdict(list)
    instructions = "input list of directions to backup\n\n"

    for direc in Direction.__subclasses__():
        partition[direc.src_desc].append(direc)

    for p in partition:
        instructions += f"from {p}\n"
        for direc in partition[p]:
            instructions += f"- to {direc.dest_desc} ({direc.id})" + "\n"

    instructions += "\n> "

    return instructions


def process_input(userinput: str):
    direcs_to_run: list[Direction] = [
        direc for direc in Direction.__subclasses__() if direc.id in userinput
    ]

    print("are you sure you want to run:")
    for direc in direcs_to_run:
        print(
            f"- from {direc.src_desc} to {direc.dest_desc} (running {direc.backup_commands})"
        )

    userinput = input("[Y]/n: ").lower()
    if userinput != "" and userinput != "y":
        return

    for direc in direcs_to_run:
        for command in direc.backup_commands:
            subprocess.run(command)

def main():
    if not args.force:
        check_for_updates()
    process_input(input(get_instructions()))


try:
    main()
except(KeyboardInterrupt):
    print("\nKeyboardInterrupt receieved. Exiting.")